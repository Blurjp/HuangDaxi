<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml">
<head> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/> 
<title>TripShare - My Map</title> 
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="FriendFeed Search"/> 

<link rel="stylesheet" href="/stylesheets/nano.css?v=3927" type="text/css"/> 
 <link rel="alternate" href="/filter/discussions?auth=8nUjX7gxKHh7xOwl&amp;format=atom" type="application/atom+xml"/>

   <script type="text/javascript" src="./static/javascript/json2.js"></script>
    <script type="text/javascript">
    	
    //
    // As mentioned at http://en.wikipedia.org/wiki/XMLHttpRequest
    //
    if( !window.XMLHttpRequest ) XMLHttpRequest = function()
    {
      try{ return new ActiveXObject("Msxml2.XMLHTTP.6.0") }catch(e){}
      try{ return new ActiveXObject("Msxml2.XMLHTTP.3.0") }catch(e){}
      try{ return new ActiveXObject("Msxml2.XMLHTTP") }catch(e){}
      try{ return new ActiveXObject("Microsoft.XMLHTTP") }catch(e){}
      throw new Error("Could not find an XMLHttpRequest alternative.")
    };

    //
    // Makes an AJAX request to a local server function w/ optional arguments
    //
    // functionName: the name of the server's AJAX function to call
    // opt_argv: an Array of arguments for the AJAX function
    //
  function Request(function_name, opt_argv) {

  if (!opt_argv)
    opt_argv = new Array();

  // Find if the last arg is a callback function; save it
  var callback = null;
  var len = opt_argv.length;
  if (len > 0 && typeof opt_argv[len-1] == 'function') {
    callback = opt_argv[len-1];
    opt_argv.length--;
  }
  var async = (callback != null);

  // Build an Array of parameters, w/ function_name being the first parameter
  var params = new Array(function_name);
  for (var i = 0; i < opt_argv.length; i++) {
    params.push(opt_argv[i]);
  }
  var body = JSON.stringify(params);

  // Create an XMLHttpRequest 'POST' request w/ an optional callback handler
  var req = new XMLHttpRequest();
  req.open('POST', '/rpc', async);

  req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  req.setRequestHeader("Content-length", body.length);
  req.setRequestHeader("Connection", "close");

  if (async) {
    req.onreadystatechange = function() {
      if(req.readyState == 4 && req.status == 200) {
        var response = null;
        try {
         response = JSON.parse(req.responseText);
        } catch (e) {
         response = req.responseText;
        }
        callback(response);
      }
    }
  }

  // Make the actual request
  req.send(body);
}

    // Adds a stub function that will pass the arguments to the AJAX call
    function InstallFunction(obj, functionName) {
      obj[functionName] = function() { Request(functionName, arguments); }
    }

    </script>
  
  <script type="text/javascript">

    // Server object that will contain the callable methods
    var server = {};
	
    // Insert 'Save' as the name of a callable method
    InstallFunction(server, 'Save');


    // Handy "macro"
    function $(id){
      return document.getElementById(id);
    }

    // Client function that calls a server rpc and provides a callback
    function savemap() {
      server.Save(startMarkerGroup, onAddSuccess);
    }

    // Callback for after a successful doAdd
    function onAddSuccess(response) {
     // $('result').value = response;
	 alert(response);
    }

    </script>
  
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    
    <script type="text/javascript">
    var rendererOptions = {
              draggable: true,
              suppressMarkers: true
                          };
  var clickerPixel;

  var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
  var directionsService = new google.maps.DirectionsService();
  var map;
  var start;
  var end;
  var dragStartPos;
  
// map zoom and center  
  var mapZoom;
  var mapCenter;
  
//  polyline and marker store 
  var polylineGroup = [];
  var startMarkerGroup = [];
  var endMarkerGroup = [];
  var polylineMarkerGroup = [];
  var markerGroup = [];
  var wayptsMarkerGroup = [];
  
  var waypts = [];
  var infoWindow;
  var clickedOverlay;
  var markerMenuDiv;
  var markerMenu;
  var polylineMenuDiv;
  var polylineMenu;
  var mapDiv;
  var geocoder;
  
  var createMarkerFlag = true;
  var selectedMarker;
  var selectedPolyline;
  
  var routeBounds = new google.maps.LatLngBounds();
  
  
  function initialize() {
    geocoder = new google.maps.Geocoder();
    var chicago = new google.maps.LatLng(41.850033, -87.6500523);
    var myOptions = {
      zoom: 6,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      center: chicago
    }
     map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
     directionsDisplay.setMap(map);
     infoWindow = new google.maps.InfoWindow();
   //  google.maps.event.addListenerOnce(map, 'tilesloaded', addMarkers);
     clickedOverlay = new google.maps.OverlayView();
     clickedOverlay.draw = function(){};
     clickedOverlay.setMap(map);
     
//    add overlay
//   var imageBounds = new google.maps.LatLngBounds(
//      new google.maps.LatLng(40.712216,-74.22655),
//      new google.maps.LatLng(40.773941,-74.12544));
//   
//     var oldmap = new google.maps.GroundOverlay(
//      "http://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg",
//      imageBounds);
//     oldmap.setMap(map);

  //add custom control


   // === create the context menu div ===           
    markerMenuDiv = document.createElement("div");
    
    markerMenuDiv.index = 1;               
    google.maps.event.addListener(map,"click",function(event) {    
    
      createMarker('normal',event.latLng);
                });   
                
    google.maps.event.addListener(map,"rightclick",function(event) {    
     markerMenuDiv.style.visibility = "hidden";
    // polylineMenuDiv.style.visibility = "hidden";
                });   
                
                
  // Create the DIV to hold the control and call the HomeControl() constructor
  // passing in this DIV.
  var markerControlDiv = document.createElement('DIV');
  var markerControl = new MarkerControl(markerControlDiv);

  markerControlDiv.index = 1;
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(markerControlDiv);   
  
    var homeControlDiv = document.createElement('DIV');
  var homeControl = new HomeControl(homeControlDiv);

  homeControlDiv.index = 2;
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(homeControlDiv);          
                                  
  }
  
  
  /**
 * The HomeControl adds a control to the map that simply
 * returns the user to Chicago. This constructor takes
 * the control DIV as an argument.
 */

function MarkerControl(controlDiv) {

  // Set CSS styles for the DIV containing the control
  // Setting padding to 5 px will offset the control
  // from the edge of the map
  controlDiv.style.padding = '5px';

  var oImg=document.createElement("img");
  oImg.style.paddingLeft = '1px';
  oImg.style.paddingRight = '1px';
oImg.setAttribute('src', 'normalTag.png');
oImg.setAttribute('alt', 'na');
oImg.setAttribute('height', '24px');
oImg.setAttribute('width', '24px');
oImg.title = 'Drag and drop the marker to your map';

controlDiv.appendChild(oImg);

 // Setup the click event listeners: simply set the map to Chicago
  google.maps.event.addDomListener(oImg, 'click', function() {
   var _latLng = clickedOverlay.getProjection().fromDivPixelToLatLng(oImg);
    createMarker('normal', _latLng);
    
  });


}
  
function HomeControl(controlDiv) {

  // Set CSS styles for the DIV containing the control
  // Setting padding to 5 px will offset the control
  // from the edge of the map
  controlDiv.style.padding = '5px';

  // Set CSS for the control border
  var controlUI = document.createElement('DIV');
  controlUI.style.backgroundColor = 'white';
  controlUI.style.borderStyle = 'solid';
  controlUI.style.borderWidth = '2px';
  controlUI.style.cursor = 'pointer';
  controlUI.style.textAlign = 'center';
  controlUI.title = 'Drag and drop the marker to your map';
  controlDiv.appendChild(controlUI);

  
  var oImg=document.createElement("img");
  oImg.style.paddingLeft = '1px';
  oImg.style.paddingRight = '1px';
oImg.setAttribute('src', 'model2.png');
oImg.setAttribute('alt', 'na');
oImg.setAttribute('height', '24px');
oImg.setAttribute('width', '24px');
controlUI.appendChild(oImg);

 google.maps.event.addDomListener(oImg, 'click', function() {
   var _latLng = clickedOverlay.getProjection().fromDivPixelToLatLng(oImg);
    createMarker('normal', _latLng);
    
  });


}

  
  
 Array.prototype.indexof = function(value){
var ctr = "";
for (var i=0; i < this.length; i++) {
// use === to check for Matches. ie., identical (===), ;
if (this[i] === value) {
return i;
}
}
return ctr;
}; 

 Array.prototype.removeAt = function(index){
     this.splice(index, 1);
}; 
  
 function MarkerWrapper(markerType, marker)
        {
          this.markerType = markerType;
          this.marker = marker;
        } 


  
 function MarkerMenu(contextMenu)
{
   // contextMenu.style.visibility="hidden";      
    contextMenu.style.background="#ffffff";      
    contextMenu.style.border="1px solid #8888FF";     
    // ===context menu HTML for varioys situations ===     
    
    contextMenu.innerHTML = '<a href="javascript:setasstart()"><div class="context">&nbsp;&nbsp;Set as Start&nbsp;&nbsp;<\/div><\/a>'
      + '<a href="javascript:setasdest()"><div class="context">&nbsp;&nbsp;Set as Dest&nbsp;&nbsp;<\/div><\/a>'   
       + '<a href="javascript:addaswaypoint()"><div class="context">&nbsp;&nbsp;Add as waypoint&nbsp;&nbsp;<\/div><\/a>' 
         + '<a href="javascript:DeleteMarker()"><div class="context">&nbsp;&nbsp;Delete Marker&nbsp;&nbsp;<\/div><\/a>' ;   
    
    var mapObject = document.getElementById("map-canvas");
    mapObject.appendChild(contextMenu);
}

 
 
 function PolylineMenu(contextMenu)
{
  // contextMenu.style.visibility="hidden";      
    contextMenu.style.background="#ffffff";      
    contextMenu.style.border="1px solid #8888FF";     
    // ===context menu HTML for varioys situations ===     
    
    contextMenu.innerHTML = '<a href="javascript:redline()"><div class="context">&nbsp;&nbsp;Set Red&nbsp;&nbsp;<\/div><\/a>'
      + '<a href="javascript:greenline()"><div class="context">&nbsp;&nbsp;Set Green&nbsp;&nbsp;<\/div><\/a>'   
       + '<a href="javascript:blueline()"><div class="context">&nbsp;&nbsp;Set Blue&nbsp;&nbsp;<\/div><\/a>' ;   
    
    var mapObject = document.getElementById("map-canvas");
    mapObject.appendChild(contextMenu);
}

 function DeleteMarker()
{
var markerIndex;

switch (selectedMarker.markerType)
{
//    case 'normal':
//        markerIndex = markerGroup.indexof(selectedMarker.marker);
//        markerGroup.splice(markerIndex, 1);
//        break;
    case 'polylinemarker':
        markerIndex = polylineMarkerGroup.indexof(selectedMarker.marker);
        polylineMarkerGroup.removeAt(markerIndex);
        break;
    case 'start':
        markerIndex = startMarkerGroup.indexof(selectedMarker.marker);
        startMarkerGroup.removeAt(markerIndex);
        break;
    case 'end':
        markerIndex = endMarkerGroup.indexof(selectedMarker.marker);
        endMarkerGroup.removeAt(markerIndex);
        break;
    case 'waypoint':
        markerIndex = wayptsMarkerGroup.indexof(selectedMarker.marker);
        wayptsMarkerGroup.removeAt(markerIndex);
        break;
    default:
        markerIndex = markerGroup.indexof(selectedMarker.marker);
        markerGroup.removeAt(markerIndex);
}

selectedMarker.marker.setMap(null);
markerMenuDiv.style.visibility = "hidden";
}

function setasstart()
{
  
    if(selectedMarker.marker)
    {   
    selectedMarker.markerType = 'start';
    selectedMarker.marker.setIcon('start.png');
    document.getElementById("start").value = selectedMarker.marker.getPosition();
    ProcessSetMarker();
    }
    if(selectedPolyline)
    {
    selectedPolyline.setMap(null);
    }
    if(document.getElementById("end").value)
    {
  //  alert(document.getElementById("end").value);
    calcRoute(false);
   // alert('start');
    }
    markerMenuDiv.style.visibility = "hidden";
}

function addaswaypoint()
{

if(selectedMarker.marker)
    {   
    selectedMarker.markerType = 'waypoint';
    selectedMarker.marker.setIcon('tag.png');
    waypts.push({
            location: selectedMarker.marker.getPosition(),
            stopover:true});
  //  wayptsMarkerGroup.push(selectedMarker);   
     ProcessSetMarker();       
    }
    if(selectedPolyline)
    {
    selectedPolyline.setMap(null);
    }
    if(document.getElementById("start").value  && document.getElementById("end").value )
    {
    calcRoute(false);
    }
    markerMenuDiv.style.visibility = "hidden";
}

function setasdest()
{
   
    if(selectedMarker.marker)
    { 
    selectedMarker.markerType = 'end';  
    selectedMarker.marker.setIcon('start.png');
    document.getElementById("end").value = selectedMarker.marker.getPosition();
     ProcessSetMarker();       
    }
     if(selectedPolyline)
    {
    selectedPolyline.setMap(null);
    
    }
    if(document.getElementById("start").value)
    {
    calcRoute(false);
   // alert('end');
    }
    markerMenuDiv.style.visibility = "hidden";
}

function redline()
{
if(selectedPolyline)
{
selectedPolyline.setOptions({

 strokeColor:'#FF0000'
}
)
}
polylineMenuDiv.style.visibility = "hidden";
}

function greenline()
{
if(selectedPolyline)
{
selectedPolyline.setOptions(
{

 strokeColor:'#00FF00'
}
)
}
polylineMenuDiv.style.visibility = "hidden";
}

function blueline()
{
if(selectedPolyline)
{
selectedPolyline.setOptions(
{
strokeColor:'#0000FF'
}
)
}
polylineMenuDiv.style.visibility = "hidden";
}

function updateTag(address, marker)
{
//alert('updateTag'); 
    var myHtml = '<strong>'+address+'</strong><br/>';
    infoWindow.setContent(myHtml);
    infoWindow.open(map, marker);
} 


  
  function reverseGeocodePosition(pos, task, marker) 
{  
geocoder.geocode({    latLng: pos  }, function(responses, status)
{
    if (status == google.maps.GeocoderStatus.OK) 
    {
        if(responses && responses.length > 0)
        {
        task(responses[0].formatted_address, marker);
        }
    }

else {
        alert("Geocoder failed due to: " + status);
      }
      }
);

 }

  

  function codeAddress(address_id) {
   // var address = document.getElementById(address_id).value;
    
    geocoder.geocode( { 'address': address_id}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) 
      {
       map.setCenter(results[0].geometry.location);        
       
       return results[0].geometry.location;
        }

     else {
        alert("Geocode was not successful for the following reason: " + status);
        return null;
      }
     }); 
  
  }

  function calcRoute(createMarkerFlag) {
    var polyline = new google.maps.Polyline({
  path:[],
  strokeColor: '#FF0000',
  strokeWeight: 5
  });
    
    start = document.getElementById("start").value;
    end = document.getElementById("end").value;

   
    var startPos = codeAddress(start);
    var endPos = codeAddress(end);
    if(createMarkerFlag == true)
    {
    createMarker('start',startPos);
    createMarker('end',endPos);
    }
    
    var dragPosition = startPos;
    
    var checkboxArray = document.getElementById("waypoints");
    for (var i = 0; i < checkboxArray.length; i++) {
      if (checkboxArray.options[i].selected == true) {
        waypts.push({
            location:checkboxArray[i].value,
            stopover:true});
      }
    }

    var request = {
        origin: start, 
        destination: end,
        waypoints: waypts,
        optimizeWaypoints: true,
        travelMode: google.maps.DirectionsTravelMode.DRIVING
    };
    directionsService.route(request, function(response, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        //directionsDisplay.setDirections(response);
        var route = response.routes[0];
        path = route.overview_path;
        
        var legs = route.legs;                                      
        for (i=0;i<legs.length;i++) {                                    
        var steps = legs[i].steps;                                         
        for (j=0;j<steps.length;j++) {                  
        var nextSegment = steps[j].path;
       
        for (k=0;k<nextSegment.length;k++) {                                                      
        polyline.getPath().push(nextSegment[k]);                                                       
        routeBounds.extend(nextSegment[k]);                                                   
        }   
        }}                       

    
        polyline.setMap(map);
        map.fitBounds(routeBounds);
        polylineGroup.push(polyline);
        selectedPolyline = polyline;
      
      
       // === set listener for polyline marker ===   
        polylineMenuDiv = document.createElement("div");    
        polylineMenuDiv.index = 1;     
       //var dragMarker = createPolylineMarker(dragPosition);
        var dragMarker = createMarker('polylinemarker',dragPosition);
                      
        google.maps.event.addListener(polyline,'rightclick', function(event){
        //dragMarker.visible = false;
        polylineMenuDiv.style.position = "absolute";
        var pixel =  clickedOverlay.getProjection().fromLatLngToContainerPixel(event.latLng);     
                    polylineMenuDiv.style.top = pixel.y+ 'px';
                    polylineMenuDiv.style.left = pixel.x+ 'px';
                  
                   
       // markerMenuDiv.innerHTML = mapContextHtml;       
        if(polylineMenuDiv.style.visibility == "visible") 
        { 
        //alert("hidden");
        polylineMenuDiv.style.visibility = "hidden";  
        }
        else
        {
        //alert("visible");
        polylineMenuDiv.style.visibility = "visible";  
        }
        polylineMenu = new PolylineMenu(polylineMenuDiv);
         //     alert('right'); 
        });
        
       
        
        
        
        google.maps.event.addListener(polyline,'mousemove', function(event){
       

       dragMarker.visible = true;
       dragMarker.setPosition(event.latLng);
        
        });
      
       
       
        // begin to drag the marker
         google.maps.event.addListener(dragMarker,'drag', function(event){
         polyline.setMap(null);
        dragMarker.visible = true;
    
        });
        
        
        // end the drag of marker
        google.maps.event.addListener(dragMarker,'dragend', function(event){
        
        waypts.push({
        location:event.latLng ,stopover:true });
        calcRoute(false);
        dragMarker.visible = false;
        });

  
      }
    });
  }
  
  function addMarkers() {
       
        var bounds = map.getBounds();
        var southWest = bounds.getSouthWest();
        var northEast = bounds.getNorthEast();
        var lngSpan = northEast.lng() - southWest.lng();
        var latSpan = northEast.lat() - southWest.lat();
      
        
      
       
          var latLng = new google.maps.LatLng(southWest.lat() + latSpan * Math.random(),
                                              southWest.lng() + lngSpan * Math.random());
     
          createMarker('normal',latLng);
        
      }
      
//      funciton deleteMarker(_marker){
//        _marker.setMap(null);
//      }
     function createPolylineMarker(latLng)
     {
        var marker = new google.maps.Marker({
            position: latLng,
            map: map,
            icon: 'node.gif'
          });
         marker.setDraggable(true);
          var username = document.getElementById("username").value;
          google.maps.event.addListener(marker, 'click', function() {
            var myHtml = '<strong>' + username + '</strong><br/>';
            infoWindow.setContent(myHtml);
            infoWindow.open(map, marker);
          });
          
          
      
        google.maps.event.addListener(marker, 'rightclick', function(){
       
         selectedMarker = new MarkerWrapper('polylinemarker',marker);
         
        // selectedMarker.setVisible(false);
        markerMenuDiv.style.position = "absolute";
       // var pixel =  clickedOverlay.getProjection().fromLatLngToContainerPixel(latLng);  
       var pixel = marker.getPosition();  
                    markerMenuDiv.style.top = pixel.y+ 'px';
                    markerMenuDiv.style.left = pixel.x+ 'px';
                  
                   
       // markerMenuDiv.innerHTML = mapContextHtml;       
        if(markerMenuDiv.style.visibility == "visible") 
        { 
        //alert("hidden");
        markerMenuDiv.style.visibility = "hidden";  
        }
        else
        {
        //alert("visible");
        markerMenuDiv.style.visibility = "visible";  
        }
        markerMenu = new MarkerMenu(markerMenuDiv);
         });
         
         return marker;
     }
      
      function createMarker(markerType, latLng) {
         alert(latLng);
         var marker = new google.maps.Marker({
            position: latLng,
            map: map
            
          });
          marker.setDraggable(true);
          var username = document.getElementById("username").value;
          google.maps.event.addListener(marker, 'click', function() {
            var myHtml = '<strong>' + username + '</strong><br/>';
            infoWindow.setContent(myHtml);
            infoWindow.open(map, marker);
          });
          
        
        
        google.maps.event.addListener(marker, 'dragstart', function(event){
         dragStartPos = event.latLng;
       // alert(dragStartPos);
        });
       
      
        google.maps.event.addListener(marker, 'rightclick', function(event){
       
        selectedMarker = new MarkerWrapper(markerType, marker);
        // selectedMarker.setVisible(false);
        markerMenuDiv.style.position = "absolute";
        
        var pixel =  clickedOverlay.getProjection().fromLatLngToContainerPixel(marker.getPosition());     
                    markerMenuDiv.style.top = pixel.y+ 'px';
                    markerMenuDiv.style.left = pixel.x+ 'px';
                  
                   
       // markerMenuDiv.innerHTML = mapContextHtml;       
        if(markerMenuDiv.style.visibility == "visible") 
        { 
        //alert("hidden");
        markerMenuDiv.style.visibility = "hidden";  
        }
        else
        {
        //alert("visible");
        markerMenuDiv.style.visibility = "visible";  
        }
        markerMenu = new MarkerMenu(markerMenuDiv);
         });
         
         return marker;
        }
        
        function MarkerWarpper(markerType, marker)
        {
          this.markerType = markerType;
          this.marker = marker;
        }
        
        function ProcessSetMarker()
        {
            switch (selectedMarker.markerType)
        {
            case 'start':
             startMarkerGroup.push(selectedMarker.marker);
           
                break;
            case 'end':
             endMarkerGroup.push(selectedMarker.marker);
           
                break;
            case 'waypoint':
             wayptsMarkerGroup.push(selectedMarker.marker);
             
             google.maps.event.addListener(selectedMarker.marker, 'dragend', function(){
             var _waypointMarker = {
            location: dragStartPos,
            stopover:true};
            
          //  var _index = waypts.indexof(_waypointMarker);
          var _index;
            for (var i=0; i < waypts.length; i++) {

if (waypts[i].location === dragStartPos) {
    _index = i;
}
}
            
           
                 if(_index>=0)
                 {
                 selectedPolyline.setMap(null);
                    waypts.removeAt(_index);
                    waypts.push({
                    location: selectedMarker.marker.getPosition(),
                    stopover:true});
                    calcRoute(false);
                  
                 }
             });
                break;
            case 'polylinemarker':
             polylineMarkerGroup.push(selectedMarker.marker);
             marker.setIcon('node.gif');
                break;
            default:
             markerGroup.push(selectedMarker.marker);
        }
        }
        
        google.maps.event.addDomListener(window, 'load', initialize);
</script>

</head> 
<body style="font-family: Arial;border: 0 none;"> 
 
<div id="bodydiv"> 
 
 
<div id="container"> 
 
 
<div id="header"> 
<table> 
<tr> 
<td class="logo"><a href="/"><img src="/static/images/magic_logo.gif" alt="FriendFeed" style="height:50px;"/></a></td> 
<td> 
<table> 
<tr> 
<td> 
<form action="/search" method="get" id="searchform"> 
<input type="text" size="25" name="q" value="" class="textbox" id="searchbox" autocomplete="off"/> 
<input type="submit" value="Search" style="font-size:15px"/> 
</form> 
</td> 
 
<td id="extralinks"> 
<div><a href="/search/advanced">Advanced search</a></div> 
<div><a href="/about/tools">Tools</a></div> 
</td> 
 
</tr> 
</table> 
 
</td> 
</tr> 
</table> 
</div> 
 
<div id="sidebar"> 
<div id="profile"> 
<table> 
<tr> 
<td class="image"><a href="/blurjp" sid="5d993f60e35c40fea505d5d2b1285ee4" class="l_profile"><img src="http://m.friendfeed-media.com/p-5d993f60e35c40fea505d5d2b1285ee4-medium-1000" alt="jason huang" class="picture medium"/></a></td> 
<td class="body"> 
<div class="name" ><a href="/blurjp" sid="5d993f60e35c40fea505d5d2b1285ee4" class="l_profile">{{greeting}}</a></div> 

</td> 
</tr> 
</table> 
</div> 
 
<div class="box"> 
<div class="box-bar friends"> 
<div class="box-corner"></div> 
<div class="box-bar-text"> 
 
 
<span class="title"><a href="/friends">Friends</a></span> 
</div> 
</div> 
<div class="subbar friends" style="display:none"></div> 
 
<div class="box-body"> 
<div class="section"> 
<ul> 
<li><a href="/">Home</a></li>
<li><a href="/mycards">My Cards</a></li> 
<li><a href="/cardsmarket">Cards Market</a></li> 
<li><a href="/filter/direct">Direct messages</a></li> 
<li><a href="/filter/discussions">My discussions</a></li> 
<li><a href="/summary/1">Best of day</a></li> 
<li><a href="/mymap">My Map</a></li> 
</ul> 
</div> 
 
<ul> 
 
 
<li><a href="/list/favorites">Favorites</a></li> 
 
 
<li><a href="/list/personal">Personal</a></li> 
 
 
<li><a href="/list/professional">Professional</a></li> 
 
</ul> 
 
<div class="footer"><a href="/friends">Browse/edit friends</a></div> 
</div> 
<div class="box-bottom"> 
<div class="box-corner"></div> 
<div class="box-spacer"></div> 
</div> 
</div> 
 
<div class="box"> 
<div class="box-bar groups"> 
<div class="box-corner"></div> 
<div class="box-bar-text"> 
 
 
<span class="title"><a href="/trips">Trips</a></span> 
</div> 
</div> 
<div class="subbar groups" style="display:none"></div> 
 
<div class="box-body"> 
<div class="emptymessage">You aren't a member of any trips yet.</div> 
<div class="emptymessage" style="margin-top:8px"><a href="/trips">Browse/create trips</a></div> 
</div> 
<div class="box-bottom"> 
<div class="box-corner"></div> 
<div class="box-spacer"></div> 
</div> 
</div> 
 
 
</div> 
 
<div id="body"> 
<div class="box white" id="page"> 
<div class="box-bar friends"> 
<div class="box-corner"></div> 
<div class="box-bar-text"> 
 
 
<div id="realtimectl" class="control"><div class="l_realtimepause" title="Pause updates"></div></div> 
 
<div class="control"><a href="#" class="l_deliveryoptions" feedid="discussions" category="special">Email / IM</a></div> 
 
<div id="realtimestatus" class="control"></div> 
 
<span class="title"><a href="/mymap">My Map</a></span> 
</div> 
</div> 
<div class="subbar friends" style="display:none"></div> 
 
<div class="box-body"> 
<div class="sharebox"> 


<div id="map-canvas" style="width: 700px; height: 500px"></div>

<b>Start:</b>
<input id="start" type="text" size="10">
<b>End:</b>
<input id="end" type="text" size="10">
<br>
<b>Waypoints:</b> <br>
<i>(Ctrl-Click for multiple selection)</i> <br>
<select multiple="" id="waypoints">
  <option value="montreal, quebec">Montreal, QBC
  </option><option value="toronto, ont">Toronto, ONT
  </option><option value="chicago, il">Chicago
  </option><option value="winnipeg, mb">Winnipeg
  </option><option value="fargo, nd">Fargo
  </option><option value="calgary, ab">Calgary
  </option><option value="spokane, wa">Spokane
</option></select>
<br>



</div>

   

<div >
<P><INPUT TYPE=SUBMIT VALUE="submit" class="submit_button" onclick=addMarkers()>
<P><INPUT TYPE=SUBMIT VALUE="save map" class="submit_button" onclick=savemap()>

</div>

<input class="savedhtml" name="html_d41d8cd98f00b204e9800998ecf8427e" value="" type="hidden"/> 
 
<input class="savedhash" name="hash_d41d8cd98f00b204e9800998ecf8427e" value="" type="hidden"/> 
 
<input class="savedloadid" name="loadid_d41d8cd98f00b204e9800998ecf8427e" value="" type="hidden"/> 
 
<input class="savedtoken" name="token_d41d8cd98f00b204e9800998ecf8427e" value="" type="hidden"/> 
 
<input class="username" id="username" value={{current_user}} type="hidden"/> 
 
 
<div style="clear:both; height:12px"></div> 
</div> 
<div class="box-bottom"> 
<div class="box-corner"></div> 
<div class="box-spacer"></div> 
</div> 
</div> 
</div> 
<div id="footer"> 
&copy;2010 TripShare

- <a href="/about/">About</a> 
- <a href="/about/help">Help</a> 
- <a href="/about/privacy">Privacy</a> 
- <a href="/about/terms">Terms</a> 
 
</div> 
</div> 
</div><div id="extradiv"></div><div id="extradivtoo"></div> 
 
 
<script src="/static/javascript/jquery-1.3.js?v=bb38" type="text/javascript"></script> 
 
 
<script type="text/javascript"> 
//<![CDATA[
function analytics() {

 
var analyticsHost = ((document.location.protocol == "https:") ? "https://ssl." : "http://www.");
$(document.body).append(unescape('%3Cscript src="' + analyticsHost + 'google-analytics.com/ga.js" type="text/javascript"%3E%3C/script%3E'));
var analyticsPoller = window.setInterval(function() {
if (window._gat) {
window.clearInterval(analyticsPoller);
var tracker = _gat._getTracker("UA-7980419-1");
tracker._setVar(':Xs:locen:nano:in:');
tracker._trackPageview();
}
}, 500);

 
 
}

//]]>
</script> 


<script type="text/javascript">
function get_check_value()
{
var cards = "";
var _rows = document.getElementById('card_table').rows;
   for (var i=0; i < _rows.length; i++)
   {
   if (_rows[i].cells[9].childNodes[0].checked)
      {
      cards = cards + _rows[i].cells[0].innerHTML + "\t";
      }
      
   }
   document.getElementById('hidden_cards').value=cards;
}
</script>
</body> 
</html>


 



